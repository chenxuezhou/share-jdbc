<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!-- 引入jdbc配置文件 -->
    <context:property-placeholder location="classpath:conf/jdbc.properties"/>
    
	<!--本示例采用DBCP连接池。 连接池配置如下 -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${jdbc_driverClassName}" />
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
	</bean> -->
	<import resource="sharding-jdbc.xml"/>
	<!--druid配置数据源-->  
   <!--  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"  
          destroy-method="close">  
        <property name="driverClassName" value="${jdbc_driverClassName}"/>  
        <property name="username" value="${jdbc_username}"/>  
        <property name="url" value="${jdbc_url}"/>  
        <property name="password" value="${jdbc_password}"/>  
        <property name="maxActive" value="10"/>  
        <property name="initialSize" value="1"/>  
        <property name="maxWait" value="60000"/>  
        <property name="minIdle" value="1"/>  
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>  
        <property name="minEvictableIdleTimeMillis" value="300000"/>  
        <property name="validationQuery" value="SELECT 'x'"/>  
        <property name="testWhileIdle" value="true"/>  
        <property name="testOnBorrow" value="false"/>  
        <property name="testOnReturn" value="false"/>  
        <property name="poolPreparedStatements" value="true"/>  
        <property name="maxPoolPreparedStatementPerConnectionSize" value="50"/>  
        <property name="maxOpenPreparedStatements" value="100"/>  
        <property name="proxyFilters">  
            <list>  
                <ref bean="statFilter"/>  
                <ref bean="logFilter"/>  
            </list>  
        </property>  
    </bean>   -->

	<!-- mybatis文件配置，扫描所有mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="wholeDataSource" p:configLocation="classpath:conf/mybatis-config.xml"
		p:mapperLocations="classpath:mapper/*.xml" /><!-- configLocation为mybatis属性 
		mapperLocations为所有mapper -->

	<!-- spring与mybatis整合配置，扫描所有dao ,生成与DAO类相同名字的bean（除了首字母小写）-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="com.demo.dao" p:sqlSessionFactoryBeanName="sqlSessionFactory" />

	<!-- 对数据源进行事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="wholeDataSource" />
	<tx:annotation-driven mode="proxy" transaction-manager="transactionManager" />
</beans>